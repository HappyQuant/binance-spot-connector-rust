/*
 * Binance Derivatives Trading COIN Futures REST API
 *
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#![allow(unused_imports)]
use crate::derivatives_trading_coin_futures::rest_api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountInformationResponsePositionsInner {
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "positionAmt", skip_serializing_if = "Option::is_none")]
    pub position_amt: Option<String>,
    #[serde(rename = "initialMargin", skip_serializing_if = "Option::is_none")]
    pub initial_margin: Option<String>,
    #[serde(rename = "maintMargin", skip_serializing_if = "Option::is_none")]
    pub maint_margin: Option<String>,
    #[serde(rename = "unrealizedProfit", skip_serializing_if = "Option::is_none")]
    pub unrealized_profit: Option<String>,
    #[serde(
        rename = "positionInitialMargin",
        skip_serializing_if = "Option::is_none"
    )]
    pub position_initial_margin: Option<String>,
    #[serde(
        rename = "openOrderInitialMargin",
        skip_serializing_if = "Option::is_none"
    )]
    pub open_order_initial_margin: Option<String>,
    #[serde(rename = "leverage", skip_serializing_if = "Option::is_none")]
    pub leverage: Option<String>,
    #[serde(rename = "isolated", skip_serializing_if = "Option::is_none")]
    pub isolated: Option<bool>,
    #[serde(rename = "positionSide", skip_serializing_if = "Option::is_none")]
    pub position_side: Option<String>,
    #[serde(rename = "entryPrice", skip_serializing_if = "Option::is_none")]
    pub entry_price: Option<String>,
    #[serde(rename = "breakEvenPrice", skip_serializing_if = "Option::is_none")]
    pub break_even_price: Option<String>,
    #[serde(rename = "maxQty", skip_serializing_if = "Option::is_none")]
    pub max_qty: Option<String>,
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<i64>,
    #[serde(rename = "notionalValue", skip_serializing_if = "Option::is_none")]
    pub notional_value: Option<String>,
}

impl AccountInformationResponsePositionsInner {
    #[must_use]
    pub fn new() -> AccountInformationResponsePositionsInner {
        AccountInformationResponsePositionsInner {
            symbol: None,
            position_amt: None,
            initial_margin: None,
            maint_margin: None,
            unrealized_profit: None,
            position_initial_margin: None,
            open_order_initial_margin: None,
            leverage: None,
            isolated: None,
            position_side: None,
            entry_price: None,
            break_even_price: None,
            max_qty: None,
            update_time: None,
            notional_value: None,
        }
    }
}
