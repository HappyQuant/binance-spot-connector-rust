/*
 * Binance Derivatives Trading Portfolio Margin WebSocket Market Streams
 *
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#![allow(unused_imports)]
use crate::derivatives_trading_portfolio_margin::websocket_streams::models;
use serde::{Deserialize, Deserializer, Serialize, de::Error};
use serde_json::Value;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConditionalOrderTradeUpdateSo {
    #[serde(rename = "s", skip_serializing_if = "Option::is_none")]
    pub s: Option<String>,
    #[serde(rename = "c", skip_serializing_if = "Option::is_none")]
    pub c: Option<String>,
    #[serde(rename = "si", skip_serializing_if = "Option::is_none")]
    pub si: Option<i64>,
    #[serde(rename = "S", skip_serializing_if = "Option::is_none")]
    pub s_uppercase: Option<String>,
    #[serde(rename = "st", skip_serializing_if = "Option::is_none")]
    pub st: Option<String>,
    #[serde(rename = "f", skip_serializing_if = "Option::is_none")]
    pub f: Option<String>,
    #[serde(rename = "q", skip_serializing_if = "Option::is_none")]
    pub q: Option<String>,
    #[serde(rename = "p", skip_serializing_if = "Option::is_none")]
    pub p: Option<String>,
    #[serde(rename = "sp", skip_serializing_if = "Option::is_none")]
    pub sp: Option<String>,
    #[serde(rename = "os", skip_serializing_if = "Option::is_none")]
    pub os: Option<String>,
    #[serde(rename = "T", skip_serializing_if = "Option::is_none")]
    pub t_uppercase: Option<i64>,
    #[serde(rename = "ut", skip_serializing_if = "Option::is_none")]
    pub ut: Option<i64>,
    #[serde(rename = "R", skip_serializing_if = "Option::is_none")]
    pub r_uppercase: Option<bool>,
    #[serde(rename = "wt", skip_serializing_if = "Option::is_none")]
    pub wt: Option<String>,
    #[serde(rename = "ps", skip_serializing_if = "Option::is_none")]
    pub ps: Option<String>,
    #[serde(rename = "cp", skip_serializing_if = "Option::is_none")]
    pub cp: Option<bool>,
    #[serde(rename = "AP", skip_serializing_if = "Option::is_none")]
    pub ap_uppercase: Option<String>,
    #[serde(rename = "cr", skip_serializing_if = "Option::is_none")]
    pub cr: Option<String>,
    #[serde(rename = "i", skip_serializing_if = "Option::is_none")]
    pub i: Option<i64>,
    #[serde(rename = "V", skip_serializing_if = "Option::is_none")]
    pub v_uppercase: Option<String>,
    #[serde(rename = "gtd", skip_serializing_if = "Option::is_none")]
    pub gtd: Option<i64>,
}

impl ConditionalOrderTradeUpdateSo {
    #[must_use]
    pub fn new() -> ConditionalOrderTradeUpdateSo {
        ConditionalOrderTradeUpdateSo {
            s: None,
            c: None,
            si: None,
            s_uppercase: None,
            st: None,
            f: None,
            q: None,
            p: None,
            sp: None,
            os: None,
            t_uppercase: None,
            ut: None,
            r_uppercase: None,
            wt: None,
            ps: None,
            cp: None,
            ap_uppercase: None,
            cr: None,
            i: None,
            v_uppercase: None,
            gtd: None,
        }
    }
}
