/*
 * Binance NFT REST API
 *
 * OpenAPI Specification for the Binance NFT REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#![allow(unused_imports)]
use http::Method;
use serde::de::DeserializeOwned;
use serde_json::Value;
use std::collections::BTreeMap;

use crate::common::{config::ConfigurationRestApi, models::RestApiResponse, utils::send_request};

mod apis;
mod models;

pub use apis::*;
pub use models::*;

#[derive(Debug, Clone)]
pub struct RestApi {
    configuration: ConfigurationRestApi,
    nft_api_client: NftApiClient,
}

impl RestApi {
    pub fn new(configuration: ConfigurationRestApi) -> Self {
        let nft_api_client = NftApiClient::new(configuration.clone());

        Self {
            configuration,
            nft_api_client,
        }
    }

    /// Send an unsigned request to the API
    ///
    /// # Arguments
    ///
    /// * `endpoint` - The API endpoint to send the request to
    /// * `method` - The HTTP method to use for the request
    /// * `params` - A map of parameters to send with the request
    ///
    /// # Returns
    ///
    /// A `RestApiResponse` containing the deserialized response data on success, or an error if the request fails
    ///
    /// # Errors
    ///
    /// Returns an `anyhow::Error` if the HTTP request fails or if parsing the response fails
    pub async fn send_request<R: DeserializeOwned + Send + 'static>(
        &self,
        endpoint: &str,
        method: Method,
        params: BTreeMap<String, Value>,
    ) -> anyhow::Result<RestApiResponse<R>> {
        send_request::<R>(&self.configuration, endpoint, method, params, None, false).await
    }

    /// Send a signed request to the API
    ///
    /// # Arguments
    ///
    /// * `endpoint` - The API endpoint to send the request to
    /// * `method` - The HTTP method to use for the request
    /// * `params` - A map of parameters to send with the request
    ///
    /// # Returns
    ///
    /// A `RestApiResponse` containing the deserialized response data on success, or an error if the request fails
    ///
    /// # Errors
    ///
    /// Returns an `anyhow::Error` if the HTTP request fails or if parsing the response fails
    pub async fn send_signed_request<R: DeserializeOwned + Send + 'static>(
        &self,
        endpoint: &str,
        method: Method,
        params: BTreeMap<String, Value>,
    ) -> anyhow::Result<RestApiResponse<R>> {
        send_request::<R>(&self.configuration, endpoint, method, params, None, true).await
    }

    /// Get NFT `Asset(USER_DATA)`
    ///
    /// Get NFT Asset
    ///
    /// Weight: 3000
    ///
    /// # Arguments
    ///
    /// - `params`: [`GetNftAssetParams`]
    ///   The parameters for this operation.
    ///
    /// # Returns
    ///
    /// [`RestApiResponse<models::GetNftAssetResponse>`] on success.
    ///
    /// # Errors
    ///
    /// This function will return an [`anyhow::Error`] if:
    /// - the HTTP request fails
    /// - any parameter is invalid
    /// - the response cannot be parsed
    /// - or one of the following occurs:
    ///   - `RequiredError`
    ///   - `ConnectorClientError`
    ///   - `UnauthorizedError`
    ///   - `ForbiddenError`
    ///   - `TooManyRequestsError`
    ///   - `RateLimitBanError`
    ///   - `ServerError`
    ///   - `NotFoundError`
    ///   - `NetworkError`
    ///   - `BadRequestError`
    ///
    ///
    /// For full API details, see the [Binance API Documentation](https://developers.binance.com/docs/nft/rest-api/Get-NFT-Asset).
    ///
    pub async fn get_nft_asset(
        &self,
        params: GetNftAssetParams,
    ) -> anyhow::Result<RestApiResponse<models::GetNftAssetResponse>> {
        self.nft_api_client.get_nft_asset(params).await
    }

    /// Get NFT Deposit `History(USER_DATA)`
    ///
    /// et NFT Deposit History
    ///
    ///
    /// * The max interval between startTime and endTime is 90 days.
    /// * If startTime and endTime are not sent, the recent 7 days' data will be returned.
    ///
    /// Weight: 3000
    ///
    /// # Arguments
    ///
    /// - `params`: [`GetNftDepositHistoryParams`]
    ///   The parameters for this operation.
    ///
    /// # Returns
    ///
    /// [`RestApiResponse<models::GetNftDepositHistoryResponse>`] on success.
    ///
    /// # Errors
    ///
    /// This function will return an [`anyhow::Error`] if:
    /// - the HTTP request fails
    /// - any parameter is invalid
    /// - the response cannot be parsed
    /// - or one of the following occurs:
    ///   - `RequiredError`
    ///   - `ConnectorClientError`
    ///   - `UnauthorizedError`
    ///   - `ForbiddenError`
    ///   - `TooManyRequestsError`
    ///   - `RateLimitBanError`
    ///   - `ServerError`
    ///   - `NotFoundError`
    ///   - `NetworkError`
    ///   - `BadRequestError`
    ///
    ///
    /// For full API details, see the [Binance API Documentation](https://developers.binance.com/docs/nft/rest-api/Get-NFT-Deposit-History).
    ///
    pub async fn get_nft_deposit_history(
        &self,
        params: GetNftDepositHistoryParams,
    ) -> anyhow::Result<RestApiResponse<models::GetNftDepositHistoryResponse>> {
        self.nft_api_client.get_nft_deposit_history(params).await
    }

    /// Get NFT Transaction `History(USER_DATA)`
    ///
    /// Get NFT Transaction History
    ///
    /// * The max interval between startTime and endTime is 90 days.
    /// * If startTime and endTime are not sent, the recent 7 days' data will be returned.
    ///
    /// Weight: 3000
    ///
    /// # Arguments
    ///
    /// - `params`: [`GetNftTransactionHistoryParams`]
    ///   The parameters for this operation.
    ///
    /// # Returns
    ///
    /// [`RestApiResponse<models::GetNftTransactionHistoryResponse>`] on success.
    ///
    /// # Errors
    ///
    /// This function will return an [`anyhow::Error`] if:
    /// - the HTTP request fails
    /// - any parameter is invalid
    /// - the response cannot be parsed
    /// - or one of the following occurs:
    ///   - `RequiredError`
    ///   - `ConnectorClientError`
    ///   - `UnauthorizedError`
    ///   - `ForbiddenError`
    ///   - `TooManyRequestsError`
    ///   - `RateLimitBanError`
    ///   - `ServerError`
    ///   - `NotFoundError`
    ///   - `NetworkError`
    ///   - `BadRequestError`
    ///
    ///
    /// For full API details, see the [Binance API Documentation](https://developers.binance.com/docs/nft/rest-api/Get-NFT-Transaction-History).
    ///
    pub async fn get_nft_transaction_history(
        &self,
        params: GetNftTransactionHistoryParams,
    ) -> anyhow::Result<RestApiResponse<models::GetNftTransactionHistoryResponse>> {
        self.nft_api_client
            .get_nft_transaction_history(params)
            .await
    }

    /// Get NFT Withdraw `History(USER_DATA)`
    ///
    /// Get NFT Withdraw History
    ///
    /// * The max interval between startTime and endTime is 90 days.
    /// * If startTime and endTime are not sent, the recent 7 days' data will be returned.
    ///
    /// Weight: 3000
    ///
    /// # Arguments
    ///
    /// - `params`: [`GetNftWithdrawHistoryParams`]
    ///   The parameters for this operation.
    ///
    /// # Returns
    ///
    /// [`RestApiResponse<models::GetNftWithdrawHistoryResponse>`] on success.
    ///
    /// # Errors
    ///
    /// This function will return an [`anyhow::Error`] if:
    /// - the HTTP request fails
    /// - any parameter is invalid
    /// - the response cannot be parsed
    /// - or one of the following occurs:
    ///   - `RequiredError`
    ///   - `ConnectorClientError`
    ///   - `UnauthorizedError`
    ///   - `ForbiddenError`
    ///   - `TooManyRequestsError`
    ///   - `RateLimitBanError`
    ///   - `ServerError`
    ///   - `NotFoundError`
    ///   - `NetworkError`
    ///   - `BadRequestError`
    ///
    ///
    /// For full API details, see the [Binance API Documentation](https://developers.binance.com/docs/nft/rest-api/Get-NFT-Withdraw-History).
    ///
    pub async fn get_nft_withdraw_history(
        &self,
        params: GetNftWithdrawHistoryParams,
    ) -> anyhow::Result<RestApiResponse<models::GetNftWithdrawHistoryResponse>> {
        self.nft_api_client.get_nft_withdraw_history(params).await
    }
}
