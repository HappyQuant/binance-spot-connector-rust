/*
 * Binance Margin Trading REST API
 *
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#![allow(unused_imports)]
use crate::margin_trading::rest_api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryCrossMarginFeeDataResponseInner {
    #[serde(rename = "vipLevel", skip_serializing_if = "Option::is_none")]
    pub vip_level: Option<i64>,
    #[serde(rename = "coin", skip_serializing_if = "Option::is_none")]
    pub coin: Option<String>,
    #[serde(rename = "transferIn", skip_serializing_if = "Option::is_none")]
    pub transfer_in: Option<bool>,
    #[serde(rename = "borrowable", skip_serializing_if = "Option::is_none")]
    pub borrowable: Option<bool>,
    #[serde(rename = "dailyInterest", skip_serializing_if = "Option::is_none")]
    pub daily_interest: Option<String>,
    #[serde(rename = "yearlyInterest", skip_serializing_if = "Option::is_none")]
    pub yearly_interest: Option<String>,
    #[serde(rename = "borrowLimit", skip_serializing_if = "Option::is_none")]
    pub borrow_limit: Option<String>,
    #[serde(rename = "marginablePairs", skip_serializing_if = "Option::is_none")]
    pub marginable_pairs: Option<Vec<String>>,
}

impl QueryCrossMarginFeeDataResponseInner {
    #[must_use]
    pub fn new() -> QueryCrossMarginFeeDataResponseInner {
        QueryCrossMarginFeeDataResponseInner {
            vip_level: None,
            coin: None,
            transfer_in: None,
            borrowable: None,
            daily_interest: None,
            yearly_interest: None,
            borrow_limit: None,
            marginable_pairs: None,
        }
    }
}
