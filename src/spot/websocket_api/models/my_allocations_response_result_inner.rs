/*
 * Binance Spot WebSocket API
 *
 * OpenAPI Specifications for the Binance Spot WebSocket API
 *
 * API documents:
 * - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
 * - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#![allow(unused_imports)]
use crate::spot::websocket_api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MyAllocationsResponseResultInner {
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "allocationId", skip_serializing_if = "Option::is_none")]
    pub allocation_id: Option<i64>,
    #[serde(rename = "allocationType", skip_serializing_if = "Option::is_none")]
    pub allocation_type: Option<String>,
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<i64>,
    #[serde(rename = "orderListId", skip_serializing_if = "Option::is_none")]
    pub order_list_id: Option<i64>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    #[serde(rename = "qty", skip_serializing_if = "Option::is_none")]
    pub qty: Option<String>,
    #[serde(rename = "quoteQty", skip_serializing_if = "Option::is_none")]
    pub quote_qty: Option<String>,
    #[serde(rename = "commission", skip_serializing_if = "Option::is_none")]
    pub commission: Option<String>,
    #[serde(rename = "commissionAsset", skip_serializing_if = "Option::is_none")]
    pub commission_asset: Option<String>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<i64>,
    #[serde(rename = "isBuyer", skip_serializing_if = "Option::is_none")]
    pub is_buyer: Option<bool>,
    #[serde(rename = "isMaker", skip_serializing_if = "Option::is_none")]
    pub is_maker: Option<bool>,
    #[serde(rename = "isAllocator", skip_serializing_if = "Option::is_none")]
    pub is_allocator: Option<bool>,
}

impl MyAllocationsResponseResultInner {
    #[must_use]
    pub fn new() -> MyAllocationsResponseResultInner {
        MyAllocationsResponseResultInner {
            symbol: None,
            allocation_id: None,
            allocation_type: None,
            order_id: None,
            order_list_id: None,
            price: None,
            qty: None,
            quote_qty: None,
            commission: None,
            commission_asset: None,
            time: None,
            is_buyer: None,
            is_maker: None,
            is_allocator: None,
        }
    }
}
